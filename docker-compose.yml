services:
  postgres:
    image: postgres:latest
    container_name: customer-postgres
    environment:
      POSTGRES_DB: customer_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db
    secrets:
      - source: postgres_password
        target: postgres_password
        mode: 0400
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID

  customer-service:
    build:
      context: ./customer
      dockerfile: Dockerfile
    container_name: customer-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customer_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD_FILE=/run/secrets/postgres_password
    env_file:
      - ./customer/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app
      - db
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    secrets:
      - postgres_password

volumes:
  postgres-data:

networks:
  app:
    driver: bridge
  db:
    driver: bridge
    internal: true

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
